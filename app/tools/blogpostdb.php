<?phpnamespace App\tools;use PDOException;use PDO;use App\validators\FilterInputTrait;class BlogPostDB {  use FilterInputTrait;  private $mydb;  public function __construct(Database $db) {       $this->mydb = $db->getConnection();  }      public function addPost (BlogPost $blogPost) {       try{         $stmt = $this->mydb->prepare("insert into blog_posts"                 . "(posttitle, postdesc, posttext , postdate , postimage, postuserid, postisvisible, postreads)"                 . "values(:pposttitle, :ppostdesc, :pposttext, :ppostdate, :ppostimage, :ppostuserid, :ppostisvisible, :ppostreads)");                  $stmt->bindValue(":pposttitle",$blogPost->postTitle);         $stmt->bindValue(":ppostdesc",$blogPost->postDesc);         $stmt->bindValue(":pposttext",$blogPost->postText);         $stmt->bindValue(":ppostdate",$blogPost->postDate);         $stmt->bindValue(":ppostimage",$blogPost->postImage);         $stmt->bindValue(":ppostuserid",$blogPost->postUserId);         $stmt->bindValue(":ppostisvisible",$blogPost->postIsVisible);         $stmt->bindValue(":ppostreads",$blogPost->postReads);                    $result= $stmt->execute();         return $result;       }catch(PDOException $pe){           error_log("<br /> error occurred " . $pe->getMessage());           return false;       }               }            public function getAllPosts() {    try{         $stmt = $this->mydb->prepare("select * from blog_posts");        $stmt->execute();        $stmt->setFetchMode(PDO::FETCH_ASSOC);        $blogPostsList = array();        while($row = $stmt->fetch()) {            $blogPost = $this->createBlogPostObjectFromArray($row);                     $blogPostsList[] = $blogPost;                    }        return $blogPostsList;    }catch(PDOException $pe) {         error_log("<br /> Error occurred " . $pe->getMessage());    }}public function getPost($id) {      if(!isset($id)) return false;    try{         $stmt = $this->mydb->prepare("select * from blog_posts where postid = :postid");        $stmt->bindValue(":postid", $id);        $stmt->execute();        if(!$stmt->rowCount()) return false;        $stmt->setFetchMode(PDO::FETCH_ASSOC);       $row = $stmt->fetch();        $blogPost = $this->createBlogPostObjectFromArray($row);        return $blogPost;   }catch(PDOException $pe) {         error_log("<br /> Error occurred " . $pe->getMessage());    }}public function getPostsByUser($username) {      if(!isset($username)) return false;       try{         $stmt = $this->mydb->prepare("select *  from blog_posts bp inner join blog_users bu on bp.postuserid = bu.userid"                . " where bu.username= :pusername");                     $stmt->bindValue(":pusername", $username);        $stmt->execute();      if(!$stmt->rowCount()) return false;        $stmt->setFetchMode(PDO::FETCH_ASSOC);          $blogPostsList = array();        while($row = $stmt->fetch()) {            $blogPost = $this->createBlogPostObjectFromArray($row);            $blogPostsList[] = $blogPost;                    }        return $blogPostsList;   }catch(PDOException $pe) {         error_log("<br /> Error occurred " . $pe->getMessage());    }}  public function updatePost (BlogPost $blogPost) {             // check to see if an image url has been set, then select an Appropriate sql statement accordingly     try{        if(!empty($blogPost->postImage)) {                 $sql = "update blog_posts "                   . "set posttitle = :pposttitle, postdesc = :ppostdesc, posttext = :pposttext, postdate = :ppostdate, "                   . "postimage =  :ppostimage, postuserid = :ppostuserid, postisvisible=:ppostisvisible "                   . " where postid = :ppostid";        } else {              $sql = "update blog_posts "                   . "set posttitle = :pposttitle, postdesc = :ppostdesc, posttext = :pposttext, postdate = :ppostdate, "                   . " postuserid = :ppostuserid, postisvisible=:ppostisvisible "                   . " where postid = :ppostid";        }                   $stmt = $this->mydb->prepare($sql);                                     $stmt->bindValue(":pposttitle",$blogPost->postTitle);           $stmt->bindValue(":ppostdesc",$blogPost->postDesc);           $stmt->bindValue(":pposttext",$blogPost->postText);           $stmt->bindValue(":ppostdate",$blogPost->postDate);                      if(!empty($blogPost->postImage)) {                 $stmt->bindValue(":ppostimage",$blogPost->postImage);           }                      $stmt->bindValue(":ppostuserid",$blogPost->postUserId);           $stmt->bindValue(":ppostisvisible",$blogPost->postIsVisible);           $stmt->bindValue(":ppostid",$blogPost->postId);                      $result= $stmt->execute();           return $result;       }catch(PDOException $pe){           error_log("<br /> error occurred " . $pe->getMessage());           return false;       }                 }            public function getVisiblePosts() {    try{         $stmt = $this->mydb->prepare("select * from blog_posts where postisvisible=1 order by postdate desc");        $stmt->execute();        $stmt->setFetchMode(PDO::FETCH_ASSOC);        $blogPostsList = array();        while($row = $stmt->fetch()) {            $blogPost = $this->createBlogPostObjectFromArray($row);            $blogPostsList[] = $blogPost;                    }        return $blogPostsList;    }catch(PDOException $pe) {         error_log("<br /> Error occurred " . $pe->getMessage());    }}public function updatePostRead($id){      if(!isset($id)) return false;          try{              $stmt = $this->mydb->prepare("update blog_posts set postreads = postreads + 1 where postid = :postid");                $stmt->bindValue(":postid", $id);                $result = $stmt->execute();        return $result;            } catch (PDOException $pe) {        error_log("<br /> Error occurred " . $pe->getMessage());        return false;    }    }public function deletePost($id){      if(!isset($id)) return false;          try{              $stmt = $this->mydb->prepare("delete from blog_posts where postid = :postid");                $stmt->bindValue(":postid", $id);                $result = $stmt->execute();        return $result;            } catch (PDOException $pe) {        error_log("<br /> Error occurred " . $pe->getMessage());        return false;    }    }    public function getPostsByText($searchtext = '') {    try{         $stmt = $this->mydb->prepare("select * from blog_posts where match(posttext) against (:psearchtext in boolean mode)");        $stmt->bindValue(":psearchtext", $searchtext);        $stmt->execute();        $stmt->setFetchMode(PDO::FETCH_ASSOC);        $blogPostsList = array();        while($row = $stmt->fetch()) {            $blogPost = $this->createBlogPostObjectFromArray($row);            $blogPostsList[] = $blogPost;                    }        return $blogPostsList;    }catch(PDOException $pe) {         error_log("<br /> Error occurred " . $pe->getMessage());    }  }  protected function createBlogPostObjectFromArray(Array $postArray) {        $blogPost = new BlogPost();        $blogPost->postId = $this->filterInput($postArray['postid']);        $blogPost->postTitle = $this->filterInput($postArray['posttitle']);        $blogPost->postDesc = $this->filterInput($postArray['postdesc']);        $blogPost->postText = $this->filterInput($postArray['posttext']);        $blogPost->postDate = date("l, jS F Y",$this->filterInput($postArray['postdate']));        $blogPost->postReads = $this->filterInput($postArray['postreads']);        $blogPost->postLikes = $this->filterInput($postArray['postlikes']);        $blogPost->postImage = $this->filterInput($postArray['postimage']);        $blogPost->postUserId = $this->filterInput($postArray['postuserid']);        $blogPost->postIsVisible = $this->filterInput($postArray['postisvisible']);        return $blogPost;  }}